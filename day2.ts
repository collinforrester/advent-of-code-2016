console.clear();
const INPUT = 'DLRURUDLULRDRUDDRLUUUDLDLDLRLRRDRRRLLLLLDDRRRDRRDRRRLRRURLRDUULRLRRDDLULRLLDUDLULURRLRLDUDLURURLDRDDULDRDRDLDLLULULLDDLRRUDULLUULRRLLLURDRLDDLDDLDRLRRLLRURRUURRRRLUDLRDDDDRDULRLLDDUURDUDRLUDULLUDLUDURRDRDUUUUDDUDLLLRLUULRUURDLRLLRRLRLLDLLRLLRRRURLRRLURRLDLLLUUDURUDDLLUURRDRDRRDLLDDLLRDRDRRLURLDLDRDLURLDULDRURRRUDLLULDUDRURULDUDLULULRRRUDLUURRDURRURRLRRLLRDDUUUUUDUULDRLDLLRRUDRRDULLLDUDDUDUURLRDLULUUDLDRDUUUDDDUDLDURRULUULUUULDRUDDLLLDLULLRLRLUDULLDLLRLDLDDDUUDURDDDLURDRRDDLDRLLRLRR\nRLDUDURDRLLLLDDRRRURLLLRUUDDLRDRDDDUDLLUDDLRDURLDRDLLDRULDDRLDDDRLDRDDDRLLULDURRRLULDRLRDRDURURRDUDRURLDRLURDRLUULLULLDLUDUDRDRDDLDDDDRDURDLUDRDRURUDDLLLRLDDRURLLUDULULDDLLLDLUDLDULUUDLRLURLDRLURURRDUUDLRDDDDDRLDULUDLDDURDLURLUURDLURLDRURRLDLLRRUDRUULLRLDUUDURRLDURRLRUULDDLDLDUUDDRLDLLRRRUURLLUURURRURRLLLUDLDRRDLUULULUDDULLUDRLDDRURDRDUDULUDRLRRRUULLDRDRLULLLDURURURLURDLRRLLLDRLDUDLLLLDUUURULDDLDLLRRUDDDURULRLLUDLRDLUUDDRDDLLLRLUURLDLRUURDURDDDLLLLLULRRRURRDLUDLUURRDRLRUDUUUURRURLRDRRLRDRDULLDRDRLDURDDUURLRUDDDDDLRLLRUDDDDDURURRLDRRUUUDLURUUDRRDLLULDRRLRRRLUUUD\nRDRURLLUUDURURDUUULLRDRLRRLRUDDUDRURLLDLUUDLRLLDDURRURLUDUDDURLURLRRURLLURRUDRUDLDRLLURLRUUURRUDDDURRRLULLLLURDLRLLDDRLDRLLRRDLURDLRDLDUDRUULLDUUUDLURRLLRUDDDUUURLURUUDRLRULUURLLRLUDDLLDURULLLDURDLULDLDDUDULUDDULLRDRURDRRLLDLDDDDRUDLDRRLLLRLLLRRULDLRLRLRLLDLRDRDLLUDRDRULDUURRDDDRLLRLDLDRDUDRULUDRDLDLDDLLRULURLLURDLRRDUDLULLDLULLUDRRDDRLRURRLDUDLRRUUDLDRLRLDRLRRDURRDRRDDULURUUDDUUULRLDRLLDURRDLUULLUDRDDDLRUDLRULLDDDLURLURLRDRLLURRRUDLRRLURDUUDRLRUUDUULLRUUUDUUDDUURULDLDLURLRURLRUDLULLULRULDRDRLLLRRDLU\nRRRRDRLUUULLLRLDDLULRUUURRDRDRURRUURUDUULRULULRDRLRRLURDRRRULUUULRRUUULULRDDLLUURRLLDUDRLRRLDDLDLLDURLLUDLDDRRURLDLULRDUULDRLRDLLDLRULLRULLUDUDUDDUULDLUUDDLUDDUULLLLLURRDRULURDUUUDULRUDLLRUUULLUULLLRUUDDRRLRDUDDRULRDLDLLLLRLDDRRRULULLLDLRLURRDULRDRDUDDRLRLDRRDLRRRLLDLLDULLUDDUDDRULLLUDDRLLRRRLDRRURUUURRDLDLURRDLURULULRDUURLLULDULDUDLLULDDUURRRLDURDLUDURLDDRDUDDLLUULDRRLDLLUDRDURLLDRLDDUDURDLUUUUURRUULULLURLDUUULLRURLLLUURDULLUULDRULLUULRDRUULLRUDLDDLRLURRUUDRLRRRULRUUULRULRRLDLUDRRLL\nULRLDLLURDRRUULRDUDDURDDDLRRRURLDRUDDLUDDDLLLRDLRLLRRUUDRRDRUULLLULULUUDRRRDRDRUUUUULRURUULULLULDULURRLURUDRDRUDRURURUDLDURUDUDDDRLRLLLLURULUDLRLDDLRUDDUUDURUULRLLLDDLLLLRRRDDLRLUDDUULRRLLRDUDLLDLRRUUULRLRDLRDUDLLLDLRULDRURDLLULLLRRRURDLLUURUDDURLDUUDLLDDRUUDULDRDRDRDDUDURLRRRRUDURLRRUDUDUURDRDULRLRLLRLUDLURUDRUDLULLULRLLULRUDDURUURDLRUULDURDRRRLLLLLUUUULUULDLDULLRURLUDLDRLRLRLRDLDRUDULDDRRDURDDULRULDRLRULDRLDLLUDLDRLRLRUDRDDR';

const TEST = 'ULL\nRRDDD\nLURDL\nUUUUD';

enum Direction {
  U,
  D,
  L,
  R
}

class Keypad {
  private inputs: Array<Array<number>>;
  
  constructor() {
    this.inputs = [
      [1,2,3],
      [4,5,6],
      [7,8,9]
    ];
  }

  private firstRowMove(start: number, direction: string) {
    let rval = start;
    const index = this.inputs[0].indexOf(start);
    if(direction === 'D') rval = this.inputs[1][index];
    if(direction === 'R' && index !== this.inputs[0].length - 1) rval = this.inputs[0][index + 1];
    if(direction === 'L' && index > 0 ) rval = this.inputs[0][index + -1];
    return rval;
  }

  private secondRowMove(start: number, direction: string) {
    let rval = start;
    const index = this.inputs[1].indexOf(start);
    if(direction === 'U') rval = this.inputs[0][index];
    if(direction === 'D') rval = this.inputs[2][index];
    if(direction === 'R' && index !== this.inputs[1].length - 1) rval = this.inputs[1][index + 1];
    if(direction === 'L' && index > 0 ) rval = this.inputs[1][index + -1];
    return rval;
  }

  private thirdRowMove(start: number, direction: string) {
    let rval = start;
    const index = this.inputs[2].indexOf(start);
    if(direction === 'U') rval = this.inputs[1][index];
    if(direction === 'R' && index !== this.inputs[2].length - 1) rval = this.inputs[2][index + 1];
    if(direction === 'L' && index > 0 ) rval = this.inputs[2][index + -1];
    return rval;
  }

  public move(start: number, direction: string) {
    if(start < 4) return this.firstRowMove(start, direction);
    if(start >= 4 && start <= 6) return this.secondRowMove(start, direction);
    if(start >= 7 && start <= 9) return this.thirdRowMove(start, direction);
  }
}
  
class Person {
  private instructions: Array<Direction|string>;
  private code: string;
  
  constructor(private keys: Keypad, puzzle: string) {
    this.instructions = puzzle.split('');
    this.code = '';
  }
  
  public result() {
    console.log(this.code);
  }
  
  public process() {
    let currentSpot = 5;
    for(let i = 0; i < this.instructions.length; i++) {
      let instruction = this.instructions[i];
      if(instruction === '\n') {
        this.code += currentSpot;
      } else {
        currentSpot = this.keys.move(currentSpot, instruction);
      }
    }
    this.code += currentSpot;
  }
}

let k = new Keypad();
let p = new Person(k, INPUT);
p.process();
p.result();
